generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  role     String

  full_name     String
  phone         String?
  address       String?
  gender        String?
  date_of_birth DateTime?

  created_at DateTime  @default(now())
  updated_at DateTime?

  doctor Doctors?

  Patient Patient[]
}

enum Role {
  USER
  ADMIN
  DOCTOR
  GUEST
}

model Medication {
  id                 Int      @id @default(autoincrement())
  acronym            String   @unique
  name               String   @unique
  price              Decimal  @db.Money
  available_quantity Int
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now())
}

model Doctors {
  id             Int             @id @default(autoincrement())
  user_id        String          @unique
  user           User            @relation(fields: [user_id], references: [id])
  qualifications String?
  work_seniority Int?
  specialty      String?
  hospital       String?
  created_at     DateTime        @default(now())
  updated_at     DateTime?

  schedule       DoctorSchedule?

  @@map("doctors")
  Appointment Appointment[]
  ExaminationreportType ExaminationReport[]
}

model DoctorSchedule {
  id           Int       @id @default(autoincrement())
  doctor_id    Int       @unique
  doctor       Doctors  @relation(fields: [doctor_id], references: [id])
  start_time   DateTime?
  end_time     DateTime?
  is_available Boolean?
  created_at   DateTime  @default(now())

  Appointment Appointment[]
}

model Patient {
  patient_id          Int           @id @default(autoincrement())
  user_id             String
  anonymous_id        String        @unique
  date_of_birth       DateTime
  gender              String
  hiv_diagnosis_date  DateTime
  created_at          DateTime      @default(now())
  updated_at          DateTime?     @updatedAt

  // Relations
  user                User          @relation(fields: [user_id], references: [id])
  appointments        Appointment[]
}

model Appointment {
  appointment_id    Int       @id @default(autoincrement())
  patient_id        Int
  doctor_id         Int
  schedule_id       Int
  appointment_type  String     // ✅ đổi từ enum AppointmentType
  appointment_date  DateTime
  status            String     // ✅ đổi từ enum AppointmentStatus
  is_anonymous      Boolean    @default(false)
  notes             String?
  created_at        DateTime   @default(now())
  updated_at        DateTime?  @updatedAt

  patient           Patient        @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
  doctor            Doctors        @relation(fields: [doctor_id], references: [id])
  schedule          DoctorSchedule @relation(fields: [schedule_id], references: [id])

  @@index([doctor_id])
  @@index([appointment_date])
  TreatmentPlan TreatmentPlan[]
}

enum AppointmentType {
  CONSULTATION
  TREATMENT
  FOLLOW_UP
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model TreatmentPlan {
  id                     Int                   @id @default(autoincrement())
  name                   String                // Ghi tên giai đoạn đang điều trị
  hiv_diagnosis_date     DateTime?             // Ngày phát hiện nhiễm HIV (nullable)
  start_date             DateTime              // Ngày bắt đầu điều trị
  end_date               DateTime?             // Ngày kết thúc điều trị
  notes                  String?               // Ghi chú thêm
  created_at             DateTime              @default(now())
  updated_at             DateTime?             @updatedAt

  // Quan hệ
  examinations           ExaminationReport[]   // Danh sách các kết quả khám
  follow_up_appointments Appointment[]         // Danh sách các cuộc hẹn tái khám
}

model ExaminationReport {
  id               Int       @id @default(autoincrement())
  name             String    @db.VarChar(50)
  doctor_id        Int
  risk_assessment  String
  is_HIV           Boolean
  HIV_test_file    String
  regimen_id       Int
  created_at       DateTime  @default(now())
  updated_at       DateTime? @updatedAt

  // Quan hệ
  doctor           Doctors   @relation(fields: [doctor_id], references: [id])
  regimen          Regimen   @relation(fields: [regimen_id], references: [id])
  treatment_plan   TreatmentPlan? @relation(fields: [treatment_plan_id], references: [id])
  treatment_plan_id Int?
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

model Regimen {
  id              Int       @id @default(autoincrement())
  care_stage      String
  regimen_type    String
  medication_list String[]
  user_guide      String
  is_default      Boolean
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now())

  examination_reports ExaminationReport[]
}

enum CareStage {
  PrEP
  PEP
  ARV
}

enum RegimenType {
  STANDARD
  CUSTOM
}
